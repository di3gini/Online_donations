# Docker Compose file Reference (https://docs.docker.com/compose/compose-file/)

version: '3.7'

# Define services
services:
  # App backend service
  app-server:
    # Configuration for building the docker image for the backend service
    build:
      context: Backend # Use an image built from the specified dockerfile in the `polling-app-server` directory.
      dockerfile: src/main/docker/Dockerfile.jvm
    ports:
      - "8080:8080" # Forward the exposed port 8080 on the container to port 8080 on the host machine
    restart: always
    depends_on: 
      - db # This service depends on mysql. Start that first. 
    networks: # Networks to join (Services on the same network can communicate with each other using their name)
      - backend
      - frontend

  # Frontend Service 
  app-client:
    build:
      context: Frontend # Use an image built from the specified dockerfile in the `polling-app-client` directory.
      dockerfile: Dockerfile
      args:
        REACT_APP_API_BASE_URL: http://127.0.0.1:8080/api/
    ports:
      - "9090:80" # Map the exposed port 80 on the container to port 9090 on the host machine
    restart: always
    depends_on:
      - app-server
    networks:
      - frontend

  db:
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_DATABASE: 'online_donations'
      # So you don't have to use root, but you can if you like
      MYSQL_USER: 'diego'
      # You can use whatever password you like
      MYSQL_PASSWORD: 'diego'
      # Password for root access
      MYSQL_ROOT_PASSWORD: 'root'
    ports:
      # <Port exposed> : < MySQL Port running inside container>
      - '3300:3306'
    expose:
      # Opens port 3306 on the container
      - '3300'
      # Where our data will be persisted
    volumes:
      - my-db:/var/lib/mysql
    networks:
      - backend

# Names our volume
volumes:
  my-db:

# Networks to be created to facilitate communication between containers
networks:
  backend:
    driver: bridge
  frontend:
    driver: bridge